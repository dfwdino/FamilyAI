@page "/"

@rendermode InteractiveServer

@using FamilyAI.Domain.Models
@using FamilyAI.Infrastructure
@using FamilyAI.Infrastructure.Services
@using FamilyAI.Presentation.Layout
@using Microsoft.AspNetCore.Components.Authorization

@inject UserServcies _userServices
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider




<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>
Welcome to your new app.
<br />
<br />
<div> Sign in</div>

<div id="choreForm">
    <EditForm Model="loginModel" OnValidSubmit="HandleValidSubmit" FormName="SignIn">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label class="form-label">Chore Name</label>
            <InputText class="form-control" @bind-Value="loginModel.Username" />
    </div>
    <div class="mb-3">
        <label class="form-label">Price</label>
            <InputText class="form-control" @bind-Value="loginModel.Password" />

    </div>
        <button type="submit" class="btn btn-success btn-lg w-100">Log In</button>
   
</EditForm>
</div>

<br/>

<div><a href="AdminLayout">Admin Layout</a></div>
<br />
<div> User Layout</div>


@code{
    private LoginModel loginModel = new();

    private string? returnUrl;

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        returnUrl = query["returnUrl"];
    }

    private async Task HandleValidSubmit()
    {
        if (loginModel != null)
        {
            var result = await _userServices.SignIn(loginModel);

            AuthState.CurrentUser = result;
            ((CustomAuthenticationStateProvider)AuthStateProvider).NotifyUserAuthentication();

            if(result != null)
            {
                Console.WriteLine("Sign in successful");
                
                switch (result.RoleName)
                {
                    case "Admin":
                        NavigationManager.NavigateTo("/AdminLayout");
                        break;
                    case "User":
                        NavigationManager.NavigateTo("/UserLayout");
                        break;
                    default:
                        NavigationManager.NavigateTo("/");
                        break;
                }
            }
            else
            {
                Console.WriteLine("Sign in failed");
            }
        }
        
    }
}