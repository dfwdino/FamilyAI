@page "/chat"
@page "/chat/{ThreadId:int}"

@using FamilyAI.Domain.Models
@using FamilyAI.Infrastructure
@using FamilyAI.Infrastructure.Services
@using FamilyAI.Presentation.Layout
@using Microsoft.AspNetCore.Components.Authorization

@inject ChatLogService _chatLogService
@inject IJSRuntime JSRuntime

@layout UserLayout

@rendermode InteractiveServer



<div class="row">
    <div class="col-md-6">
        <h3>@logs.FirstOrDefault()?.Thread.ThreadName</h3>
        <div @ref="chatContainer" style="height: 400px; overflow-y: auto; border: 1px solid #ddd; padding: 10px;">

        @foreach (var log in logs)
        {

            if (log.IsReply)
            {
                <div class="col-md-6" style="text-align:left;">@log.Text</div>
              

            }
            else
            {
                <div class="col-md-6" style="text-align:right;color:blue">@log.Text</div>
            }

            <hr />
        }
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-6">

        <p>
            <InputTextArea class="form-control" @bind-Value="chatLogs.Text"></InputTextArea>
            <button @onclick="@(() => AddChat())">submit</button>
        </p>
    </div>

</div>

<script>
    function scrollToBottom(element) {
        element.scrollTop = element.scrollHeight;
    }
</script>


@code {
    [Parameter]
    public int ThreadId { get; set; } = 0;

    ChatLog chatLogs = new ChatLog();
    List<ChatLog> logs = new List<ChatLog>();
    int userId;
    private ElementReference chatContainer;
    private bool firstRender = true;


    protected override async Task OnInitializedAsync()
    {
        userId = AuthState.CurrentUser.UserId;
        logs = await _chatLogService.GetChatLogsByThreadAsync(ThreadId);


    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Scroll to bottom on first load
            await JSRuntime.InvokeVoidAsync("scrollToBottom", chatContainer);
        }
    }


    private async void AddChat()
    {

        var newMessage = new ChatLog
        {
            EntryTime = DateTime.Now,
            IsReply = false,
            UserId = userId,
            Text = chatLogs.Text  // Copy the text from the input
        };

        if(ThreadId != 0)
        {
            newMessage.ThreadId = ThreadId;
        }
       

       
        logs.Add(newMessage);

       
        await _chatLogService.AddChatLogAsync(newMessage);

     
        chatLogs.Text = string.Empty;

        // Force UI update
        StateHasChanged();

        // Scroll to bottom after the UI updates
        await JSRuntime.InvokeVoidAsync("scrollToBottom", chatContainer);
    }


}